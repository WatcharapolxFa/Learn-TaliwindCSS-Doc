### General Information Tracker

จุดเริ่มต้นมาจาก Linus Trovald (ผู้สร้าง Linux)ทำมาทดแทน VCS เดิม เพราะต้อง Support developer 

### Concept ของ Git

> 1️⃣ Workspace (พื้นที่ทำงาน) เมื่อเราใช้คำสั่ง **git add.** (คือเลือกทั้งหมดใน File ที่เราทำงานอยู่) เราจะย้ายงานไปไว้ใน 2️⃣ Index  แบบเหมือนเราเรียกคนที่จะถ่ายมาเข้าฉาก เมื่อเราใช้คำสั่ง **git commit -m “ คำที่ต้องการ comment ”** File ทั้งหมดจะถูกย้ายไปที่ 3️⃣ Local Repository  เหมือนเรากดถ่ายภาพไว้แล้ว File ยังอยู่บนเครื่องของเรานะ เมื่อเราใช้คำสั่ง **git push**  File จะถูกย้ายไปที่ 4️⃣ Upstream Repository คือขึ้นไปเก็บบน Cloud ของ Git
> 

### คำสั่ง Git ที่จำเป็น

```
git init บอกให้ git ทำงานที่ โฟลเดอร์นั้น

เอาทุกไฟล์
git add . 

ไฟล์ที่ต้องการเท่านั้น
git add ตามด้วชื่อไฟล์ Ex. git add index.html 

git commit - m " รายระเอียดที่ต้องการใส่ " 

ใช้ครั้งแรกหลังจากเรา git commit ไปแล้วต้องการยกเลิก
git rm --cached ชื่อไฟล์ที่ต้องการลบ commit  Ex. git rm --cached index.html

ครั้งต่อไปเราจะใช้คำสั่ง
git restore ตามด้วยชื่อไฟล์ที่ต้องการกลับไปเป็น commit ล่าสุด Ex. git restore index.html

git restore --staged . เรียกคืนทุกไฟล์กลับไปเป็น commit ล่าสุด

ยกเลิก commit มันไม่ได้แก้ code นะ แก้แค่ status 
git reset --soft HEAD^1  

ดูการทำงานที่ผ่านมา
git log --oneline

ดู status ต่สง
git status 

git fetch
ใช้ตรวจสอบว่าไฟล์ ในเครื่อง กับ remote(ไฟล์บน github) มีความแตกต่างกันหรือไม่ 
ไฟล์ไหนใหม่กว่ากัน 

git pull 
เป็นการดึงไฟล์ที่มีการเปลี่ยนแปลงใน remote(ไฟล์บน github) มาเปลี่ยนแปลงในเครื่อง
ซึ่งจริงแล้วมันใช้คำสั่ง git fetch ตามด้วย git merge นั้นเอง
```

### Git with team

```
**git branch**
   การแตกการทำงานออกเป็น  2 ส่วนใหญ่ๆ 1 คือ main กับ develop แล้วเราก็จะแตกย่อยใน develop เป็น feature อีกที

git branch  - -list เช็คว่า มี branch อะไรบ้าง

git checkout branch_name เอาไว้สลับไปเข้าสู่ branch name ที่เลือกไว้

git checkout -b branch_name เอาไว้สร้าง branch ใหม่และสลับไปอยู่ที่ branch นั้นเลย

git branch -d  branch_name เอาไว้ลบ branch

git reflog ดูรหัส

นำรหัสมาใช้ git checkout -b branch_name รหัส   ใช้ตอนที่เราต้องการกู้ branch คืน

git commit -am “” เป็นคำสั่งที่สามารถ commit and add พร้อมกัน
```

```
git merge 
   ใช้ต่อเมื่อเราแยก branch กันเขียนแล้วต้องการที่จะรวมงานเข้าด้วยกัน โดยเราจะต้อง git add git commit git push 
กลับมา branch ที่ต้องการแล้วถึงจะ git merge ไปยัง branch ที่ต้องการ เอามารวมได้
```

```
git rebase
	เป็นการย้ายข้อมูล จาก branch หนึ่งมาต่ออีก branch 
ขั้นตอนการทำ rebase จาก dev to main
1.  update repo
2.  check out main
3.  git pull
4.  git rebase dev
```

```
git ignore
	เป็นการ สร้่างไฟล์  .gitignore ขึ้นมาเพื่อเป็นการกันไฟล์ที่ไม่ต้องการบางตัวขึ้น git repo ที่เราได้ทำการ Remote ไว้
การเขียน gitignore

name/ : ทุก folder ที่มีชื่อนี้
/name/ : ทุก folder ที่มี name ในชื่อ
*.file : ทุกไฟล์ที่มีนามสกุลนี้
name.* : ไฟล์ที่ขึ้นต้นด้วยชื่อใน path เดียวกัน
*.file.* : ทุกไฟล์ที่มีนามสกุล.file และ .file อย่างอื่นด้วย
\! file.txt ! : ยกเลิกการ ignore ไฟล์ .txt ที่ขึ้นต้นด้วย file ทั้งหมด
**/ name : เฉพาะ file ชื่อ name หรือ folder ชื่อ name 
a/** or a/**b: ทุกไฟล์ใน folder a ทั้งหมด หรือ folder b ใน a 

* = file 
** = folder
! = ยกเลิก

[ตัวช่วย](https://www.toptal.com/developers/gitignore/)
```